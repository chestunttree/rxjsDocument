{"version":3,"mappings":"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","names":["attrs","attr","key","find","a","hasOwnProperty","toLowerCase","undefined","attrValue","def","trim","i0","LIVE_EXAMPLE_BASE","CONTENT_URL_PREFIX","ZIP_BASE","LiveExampleComponent","constructor","elementRef","location","el","ElementRef","nativeElement","attributes","attrMap","name","value","getAttrs","exampleDir","this","getExampleDir","path","stackblitzName","getStackblitzName","mode","getMode","enableDownload","getEnableDownload","stackblitz","getStackblitz","zip","getZip","title","getTitle","ngAfterContentInit","textContent","content","boolFromValue","getAttrValue","match","downloadOnly","isEmbedded","zipName","split","t","selectors","EmbeddedStackblitzComponent","s","ngAfterViewInit","iframe","src","LiveExampleModule","CommonModule"],"sources":["./src/app/shared/attribute-utils.ts","./src/app/custom-elements/live-example/live-example.component.ts","./src/app/custom-elements/live-example/live-example.module.ts"],"sourcesContent":["// Utilities for processing HTML element attributes\r\nimport { ElementRef } from '@angular/core';\r\n\r\nexport interface AttrMap {\r\n  [key: string]: string;\r\n}\r\n\r\n/**\r\n * Get attribute map from element or ElementRef `attributes`.\r\n * Attribute map keys are forced lowercase for case-insensitive lookup.\r\n *\r\n * @param el The source of the attributes.\r\n */\r\nexport function getAttrs(el:  HTMLElement | ElementRef): AttrMap {\r\n  const attrs: NamedNodeMap = el instanceof ElementRef ? el.nativeElement.attributes : el.attributes;\r\n  const attrMap: AttrMap = {};\r\n  for (const attr of attrs as any as Attr[] /* cast due to https://github.com/Microsoft/TypeScript/issues/2695 */) {\r\n    attrMap[attr.name.toLowerCase()] = attr.value;\r\n  }\r\n  return attrMap;\r\n}\r\n\r\n/**\r\n * Return the attribute that matches `attr`.\r\n *\r\n * @param attr Name of the attribute or a string of candidate attribute names.\r\n */\r\nexport function getAttrValue(attrs: AttrMap, attr: string | string[]): string | undefined {\r\n  const key = (typeof attr === 'string')\r\n      ? attr\r\n      : attr.find(a => attrs.hasOwnProperty(a.toLowerCase()));\r\n\r\n  return (key === undefined) ? undefined : attrs[key.toLowerCase()];\r\n}\r\n\r\n/**\r\n * Return the boolean state of an attribute value (if supplied)\r\n *\r\n * @param attrValue The string value of some attribute (or undefined if attribute not present).\r\n * @param def Default boolean value when attribute is undefined.\r\n */\r\nexport function boolFromValue(attrValue: string | undefined, def: boolean = false) {\r\n  return attrValue === undefined ? def : attrValue.trim() !== 'false';\r\n}\r\n\r\n/**\r\n * Return the boolean state of attribute from an element\r\n *\r\n * @param el The source of the attributes.\r\n * @param atty Name of the attribute or a string of candidate attribute names.\r\n * @param def Default boolean value when attribute is undefined.\r\n */\r\nexport function getBoolFromAttribute(\r\n  el:  HTMLElement | ElementRef,\r\n  attr: string | string[],\r\n  def: boolean = false): boolean {\r\n  return boolFromValue(getAttrValue(getAttrs(el), attr), def);\r\n}\r\n","/* tslint:disable component-selector */\r\nimport { AfterContentInit, AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\r\nimport { AttrMap, boolFromValue, getAttrs, getAttrValue } from 'app/shared/attribute-utils';\r\n\r\nconst LIVE_EXAMPLE_BASE = CONTENT_URL_PREFIX + 'live-examples/';\r\nconst ZIP_BASE = CONTENT_URL_PREFIX + 'zips/';\r\n\r\n/**\r\n * Angular.io Live Example Embedded Component\r\n *\r\n * Renders a link to a live/host example of the doc page.\r\n *\r\n * All attributes and the text content are optional\r\n *\r\n * Usage:\r\n *   <live-example\r\n *      [name=\"...\"]        // name of the example directory\r\n *      [stackblitz=\"...\"\"] // name of the stackblitz file (becomes part of zip file name as well)\r\n *      [embedded]          // embed the stackblitz in the doc page, else display in new browser tab (default)\r\n *      [noDownload]        // no downloadable zip option\r\n *      [downloadOnly]      // just the zip\r\n *      [title=\"...\"]>      // text for live example link and tooltip\r\n *        text              // higher precedence way to specify text for live example link and tooltip\r\n *  </live-example>\r\n * Example:\r\n *   <p>Run <live-example>Try the live example</live-example></p>.\r\n *   // ~/resources/live-examples/{page}/stackblitz.json\r\n *\r\n *   <p>Run <live-example name=\"toh-pt1\">this example</live-example></p>.\r\n *   // ~/resources/live-examples/toh-pt1/stackblitz.json\r\n *\r\n *   // Link to the default stackblitz in the toh-pt1 sample\r\n *   // The title overrides default (\"live example\") with \"Tour of Heroes - Part 1\"\r\n *   <p>Run <live-example name=\"toh-pt1\" title=\"Tour of Heroes - Part 1\"></live-example></p>.\r\n *   // ~/resources/live-examples/toh-pt1/stackblitz.json\r\n *\r\n *   <p>Run <live-example stackblitz=\"minimal\"></live-example></p>.\r\n *   // ~/resources/live-examples/{page}/minimal.stackblitz.json\r\n *\r\n *   // Embed the current page's default stackblitz\r\n *   // Text within tag is \"live example\"\r\n *   // No title (no tooltip)\r\n *   <live-example embedded title=\"\"></live-example>\r\n *   // ~/resources/live-examples/{page}/stackblitz.json\r\n *\r\n *   // Displays within the document page as an embedded style stackblitz editor\r\n *   <live-example name=\"toh-pt1\" embedded stackblitz=\"minimal\">Tour of Heroes - Part 1</live-example>\r\n *   // ~/resources/live-examples/toh-pt1/minimal.stackblitz.json\r\n */\r\n@Component({\r\n  // eslint-disable-next-line @angular-eslint/component-selector\r\n  selector: 'live-example',\r\n  template: `\r\n    <!-- Content projection is used to get the content HTML provided to the component. -->\r\n    <span #content style=\"display: none\"><ng-content></ng-content></span>\r\n\r\n    <span [ngSwitch]=\"mode\">\r\n      <span *ngSwitchCase=\"'embedded'\">\r\n        <div title=\"{{ title }}\">\r\n          <aio-embedded-stackblitz [src]=\"stackblitz\"></aio-embedded-stackblitz>\r\n        </div>\r\n        <p *ngIf=\"enableDownload\">You can also <a [href]=\"zip\" download title=\"Download example\">download this example</a>.</p>\r\n      </span>\r\n      <span *ngSwitchCase=\"'downloadOnly'\">\r\n        <a [href]=\"zip\" download title=\"{{ title }}\">{{ title }}</a>\r\n      </span>\r\n      <span *ngSwitchDefault>\r\n        <a [href]=\"stackblitz\" target=\"_blank\" title=\"{{ title }}\">{{ title }}</a>\r\n        <span *ngIf=\"enableDownload\"> / <a [href]=\"zip\" download title=\"Download example\">download example</a> </span>\r\n      </span>\r\n    </span>\r\n  `,\r\n})\r\nexport class LiveExampleComponent implements AfterContentInit {\r\n  readonly mode: 'default' | 'embedded' | 'downloadOnly';\r\n  readonly enableDownload: boolean;\r\n  readonly stackblitz: string;\r\n  readonly zip: string;\r\n  title: string;\r\n\r\n  @ViewChild('content', { static: true })\r\n  private content: ElementRef;\r\n\r\n  constructor(elementRef: ElementRef, location: Location) {\r\n    const attrs = getAttrs(elementRef);\r\n    const exampleDir = this.getExampleDir(attrs, location.path(false));\r\n    const stackblitzName = this.getStackblitzName(attrs);\r\n\r\n    this.mode = this.getMode(attrs);\r\n    this.enableDownload = this.getEnableDownload(attrs);\r\n    this.stackblitz = this.getStackblitz(exampleDir, stackblitzName, this.mode === 'embedded');\r\n    this.zip = this.getZip(exampleDir, stackblitzName);\r\n    this.title = this.getTitle(attrs);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // Angular will sanitize this title when displayed, so it should be plain text.\r\n    const textContent = this.content.nativeElement.textContent.trim();\r\n    if (textContent) {\r\n      this.title = textContent;\r\n    }\r\n  }\r\n\r\n  private getEnableDownload(attrs: AttrMap) {\r\n    const downloadDisabled = boolFromValue(getAttrValue(attrs, 'noDownload'));\r\n    return !downloadDisabled;\r\n  }\r\n\r\n  private getExampleDir(attrs: AttrMap, path: string) {\r\n    let exampleDir = getAttrValue(attrs, 'name');\r\n    if (!exampleDir) {\r\n      // Take the last path segment, excluding query params and hash fragment.\r\n      const match = path.match(/[^/?#]+(?=\\/?(?:\\?|#|$))/);\r\n      exampleDir = match ? match[0] : 'index';\r\n    }\r\n    return exampleDir.trim();\r\n  }\r\n\r\n  private getMode(this: LiveExampleComponent, attrs: AttrMap): typeof this.mode {\r\n    const downloadOnly = boolFromValue(getAttrValue(attrs, 'downloadOnly'));\r\n    const isEmbedded = boolFromValue(getAttrValue(attrs, 'embedded'));\r\n\r\n    return downloadOnly ? 'downloadOnly' : isEmbedded ? 'embedded' : 'default';\r\n  }\r\n\r\n  private getStackblitz(exampleDir: string, stackblitzName: string, isEmbedded: boolean) {\r\n    const urlQuery = isEmbedded ? '?ctl=1' : '';\r\n    return `${LIVE_EXAMPLE_BASE}${exampleDir}/${stackblitzName}stackblitz.html${urlQuery}`;\r\n  }\r\n\r\n  private getStackblitzName(attrs: AttrMap) {\r\n    const attrValue = (getAttrValue(attrs, 'stackblitz') || '').trim();\r\n    return attrValue && `${attrValue}.`;\r\n  }\r\n\r\n  private getTitle(attrs: AttrMap) {\r\n    return (getAttrValue(attrs, 'title') || 'live example').trim();\r\n  }\r\n\r\n  private getZip(exampleDir: string, stackblitzName: string) {\r\n    const zipName = exampleDir.split('/')[0];\r\n    return `${ZIP_BASE}${exampleDir}/${stackblitzName}${zipName}.zip`;\r\n  }\r\n}\r\n\r\n///// EmbeddedStackblitzComponent ///\r\n/**\r\n * Hides the <iframe> so we can test LiveExampleComponent without actually triggering\r\n * a call to stackblitz to load the iframe\r\n */\r\n@Component({\r\n  selector: 'aio-embedded-stackblitz',\r\n  template: '<iframe #iframe frameborder=\"0\" width=\"100%\" height=\"100%\"></iframe>',\r\n  styles: ['iframe { min-height: 400px; }'],\r\n})\r\nexport class EmbeddedStackblitzComponent implements AfterViewInit {\r\n  @Input() src: string;\r\n\r\n  @ViewChild('iframe', { static: true }) iframe: ElementRef;\r\n\r\n  ngAfterViewInit() {\r\n    // DEVELOPMENT TESTING ONLY\r\n    // this.src = 'https://angular.io/resources/live-examples/quickstart/ts/stackblitz.json';\r\n\r\n    if (this.iframe) {\r\n      // security: the `src` is always authored by the documentation team\r\n      // and is considered to be safe\r\n      this.iframe.nativeElement.src = this.src;\r\n    }\r\n  }\r\n}\r\n","import { NgModule, Type } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EmbeddedStackblitzComponent, LiveExampleComponent } from './live-example.component';\r\nimport { WithCustomElementComponent } from '../element-registry';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule ],\r\n  declarations: [ LiveExampleComponent, EmbeddedStackblitzComponent ]\r\n})\r\nexport class LiveExampleModule implements WithCustomElementComponent {\r\n  customElementComponent: Type<any> = LiveExampleComponent;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"517.f05c67b8a13c9f3d.js"}