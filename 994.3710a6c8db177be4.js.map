{"version":3,"mappings":"kMASA,MAAMA,EAAgBC,KAAqB,iBAGpC,IAAMC,EAAe,MAAtB,QAGJC,YAAoBC,eAClBC,KAAKC,WAAaD,KAAKE,gBAGjBA,gBAEN,MAAMD,EAAaD,KAAKD,KAAKI,IAASR,GAAeS,QACnDC,KAAIC,GAUV,WAAsBC,GACpB,OAAOC,OAAOC,KAAKF,GAAcF,IAAIK,IACnC,MAAMC,EAAMJ,EAAaG,GACzB,MAAO,CACLE,GAAIC,EAAOH,GACXI,MAAOJ,EACPK,MAAOJ,EAAII,MACXC,cAAeC,EAAgBN,EAAIK,cAAeN,MAGrDQ,KAAKC,GApBUC,CAAad,OACzBe,QAGDpB,SAAiDqB,UAC3CrB,gDAfEJ,GAAe0B,wCAAf1B,EAAe2B,QAAf3B,EAAe,YAAfA,GAAe,GAkC5B,WAAyB4B,EAAsBf,GAC7C,OAAOF,OAAOC,KAAKgB,GAAiBpB,IAAIqB,IACpC,MAAMC,EAAMF,EAAgBC,GAC5B,MAAO,CACLd,GAAIC,EAAOa,GACXZ,MAAOY,EACPX,MAAOY,EAAIZ,MACXa,UAAWC,EAAYF,EAAIC,UAAWF,EAAQhB,MAGnDQ,KAAKC,GAIR,WAAqBW,EAAmBJ,EAAgBhB,GACtD,OAAOF,OAAOC,KAAKqB,GAAczB,IAAI0B,IACnC,MAAMC,EAAMF,EAAaC,GACzBC,SAAIC,SAAWvB,EACfsB,EAAIE,YAAcR,EAClBM,EAAIpB,GAAKC,EAAOkB,GACTC,IAERd,KAAKiB,GAGR,WAAqBC,EAA2BC,GAC9C,OAAOD,EAAErB,QAAUsB,EAAEtB,MAAQoB,EAAcC,EAAGC,GAAKD,EAAErB,MAAQsB,EAAEtB,MAAQ,GAAI,EAG7E,WAAuBqB,EAAoBC,GAC1C,OAAOD,EAAEtB,MAAMwB,cAAgBD,EAAEvB,MAAMwB,cAAgB,GAAI,EAG5D,WAAgBxB,GACd,OAAOA,EAAMyB,cAAcC,QAAQ,OAAQ,8BCvD7BC,kBAA6C,SAA7CA,CAA6C,QAA7CA,CAA6C,QAGnCA,SAAoBA,QACxBA,gBAAgCA,SAAuCA,8CAHfA,mCAEpDA,wBAC4BA,mEALxCA,eACEA,uBAQFA,kCAR2BA,uDAN7BA,eAEEA,eACAA,gBAA8BA,SAAuBA,QAErDA,uBAUFA,kCAb6BA,0BACGA,wBAEJA,gEAbhCA,iBAA0D,cAGtDA,eACAA,cAAIA,SAAoBA,UAG1BA,iBACEA,uBAgBFA,oCArB6BA,0BACvBA,wBAIyBA,2CAsBlC,IAAMC,EAAqB,MAA5B,QAKJ5C,YAAY6C,EAAoCC,0BAFhD5C,eAAY,EAGVA,KAAK2C,SAAWA,EAASE,SAASL,QAAQ,OAAQ,IAGpDM,KAAKnC,GACH,OAAOX,KAAK2C,SAAW,IAAMhC,EAAIC,GAGnCmC,WAGE/C,KAAK4C,gBAAgB3C,WAAW+C,UAAWC,GAAUjD,KAAKC,WAAagD,GAIzEC,SAASC,GACPnD,KAAKoD,UAAYD,IAASA,EAAOE,WAAaF,EAAOG,KAAKD,YAAa,gDArB9DX,GAAqBnB,+CAArBmB,EAAqBa,oGAArBC,uBAAuB,waAhChCf,iBAAiC,WAE7BA,uBA0BFA,iBA1B6CA,kFA8BtCC,GAAqB,GC9BrBe,EAAkB,MAAzB,QALN3D,cAMEE,4BAAoC0C,gDADzBe,6DAFA,CAAE5D,GAAiB6D,SAFrB,CAAEC,SAIAF,GAAkB","names":["resourcesPath","CONTENT_URL_PREFIX","ResourceService","constructor","http","this","categories","getCategories","get","pipe","map","data","categoryJson","Object","keys","catKey","cat","id","makeId","title","order","subCategories","mkSubCategories","sort","compareCats","mkCategories","publishLast","connect","e","factory","subCategoryJson","subKey","sub","resources","mkResources","resourceJson","resKey","res","category","subCategory","compareTitles","l","r","toUpperCase","toLowerCase","replace","i0","ResourceListComponent","location","resourceService","pathname","href","ngOnInit","subscribe","cats","onScroll","target","scrollPos","scrollTop","body","selectors","ctx","ResourceListModule","imports","CommonModule"],"sources":["./src/app/custom-elements/resource/resource.service.ts","./src/app/custom-elements/resource/resource-list.component.ts","./src/app/custom-elements/resource/resource-list.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { ConnectableObservable, Observable } from 'rxjs';\r\nimport { map, publishLast } from 'rxjs/operators';\r\n\r\nimport { Category, Resource, SubCategory } from './resource.model';\r\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\r\n\r\nconst resourcesPath = CONTENT_URL_PREFIX + 'resources.json';\r\n\r\n@Injectable()\r\nexport class ResourceService {\r\n  categories: Observable<Category[]>;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.categories = this.getCategories();\r\n  }\r\n\r\n  private getCategories(): Observable<Category[]> {\r\n\r\n    const categories = this.http.get<any>(resourcesPath).pipe(\r\n      map(data => mkCategories(data)),\r\n      publishLast(),\r\n    );\r\n\r\n    (categories as ConnectableObservable<Category[]>).connect();\r\n    return categories;\r\n  };\r\n}\r\n\r\n// Extract sorted Category[] from resource JSON data\r\nfunction mkCategories(categoryJson: any): Category[] {\r\n  return Object.keys(categoryJson).map(catKey => {\r\n    const cat = categoryJson[catKey];\r\n    return {\r\n      id: makeId(catKey),\r\n      title: catKey,\r\n      order: cat.order,\r\n      subCategories: mkSubCategories(cat.subCategories, catKey)\r\n    } as Category;\r\n  })\r\n  .sort(compareCats);\r\n}\r\n\r\n// Extract sorted SubCategory[] from JSON category data\r\nfunction mkSubCategories(subCategoryJson: any, catKey: string): SubCategory[] {\r\n  return Object.keys(subCategoryJson).map(subKey => {\r\n      const sub = subCategoryJson[subKey];\r\n      return {\r\n        id: makeId(subKey),\r\n        title: subKey,\r\n        order: sub.order,\r\n        resources: mkResources(sub.resources, subKey, catKey)\r\n      } as SubCategory;\r\n  })\r\n  .sort(compareCats);\r\n}\r\n\r\n// Extract sorted Resource[] from JSON subcategory data\r\nfunction mkResources(resourceJson: any, subKey: string, catKey: string): Resource[] {\r\n  return Object.keys(resourceJson).map(resKey => {\r\n    const res = resourceJson[resKey];\r\n    res.category = catKey;\r\n    res.subCategory = subKey;\r\n    res.id = makeId(resKey);\r\n    return res as Resource;\r\n  })\r\n  .sort(compareTitles);\r\n}\r\n\r\nfunction compareCats(l: Category | SubCategory, r: Category | SubCategory) {\r\n  return l.order === r.order ? compareTitles(l, r) : l.order > r.order ? 1 : -1;\r\n}\r\n\r\nfunction compareTitles(l: {title: string}, r: {title: string}) {\r\n return l.title.toUpperCase() > r.title.toUpperCase() ? 1 : -1;\r\n}\r\n\r\nfunction makeId(title: string) {\r\n  return title.toLowerCase().replace(/\\s+/g, '-');\r\n}\r\n","import { Component, HostListener, OnInit } from '@angular/core';\r\nimport { PlatformLocation } from '@angular/common';\r\n\r\nimport { Category } from './resource.model';\r\nimport { ResourceService } from './resource.service';\r\n\r\n@Component({\r\n  selector: 'aio-resource-list',\r\n  template: `\r\n    <div class=\"resources-container\">\r\n      <div class=\"l-flex--column\">\r\n        <div class=\"showcase\" *ngFor=\"let category of categories\">\r\n          <header class=\"c-resource-header\">\r\n            <!-- eslint-disable-next-line @angular-eslint/template/accessibility-elements-content -->\r\n            <a class=\"h-anchor-offset\" id=\"{{ category.id }}\"></a>\r\n            <h2>{{ category.title }}</h2>\r\n          </header>\r\n\r\n          <div class=\"shadow-1\">\r\n            <div *ngFor=\"let subCategory of category.subCategories\">\r\n            <!-- eslint-disable-next-line @angular-eslint/template/accessibility-elements-content -->\r\n              <a class=\"h-anchor-offset\" id=\"{{ subCategory.id }}\"></a>\r\n              <h3 class=\"subcategory-title\">{{ subCategory.title }}</h3>\r\n\r\n              <div *ngFor=\"let resource of subCategory.resources\">\r\n                <div class=\"c-resource\" *ngIf=\"resource.rev\">\r\n                  <a class=\"l-flex--column resource-row-link\" target=\"_blank\" [href]=\"resource.url\">\r\n                    <div>\r\n                      <h4>{{ resource.title }}</h4>\r\n                      <p class=\"resource-description\">{{ resource.desc || 'No Description' }}</p>\r\n                    </div>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n})\r\nexport class ResourceListComponent implements OnInit {\r\n  categories: Category[];\r\n  location: string;\r\n  scrollPos = 0;\r\n\r\n  constructor(location: PlatformLocation, private resourceService: ResourceService) {\r\n    this.location = location.pathname.replace(/^\\/+/, '');\r\n  }\r\n\r\n  href(cat: { id: string }) {\r\n    return this.location + '#' + cat.id;\r\n  }\r\n\r\n  ngOnInit() {\r\n    // Not using async pipe because cats appear twice in template\r\n    // No need to unsubscribe because categories observable completes.\r\n    this.resourceService.categories.subscribe((cats) => (this.categories = cats));\r\n  }\r\n\r\n  @HostListener('window:scroll', ['$event.target'])\r\n  onScroll(target: any) {\r\n    this.scrollPos = target ? target.scrollTop || target.body.scrollTop || 0 : 0;\r\n  }\r\n}\r\n","import { NgModule, Type } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResourceListComponent } from './resource-list.component';\r\nimport { ResourceService } from './resource.service';\r\nimport { WithCustomElementComponent } from '../element-registry';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule ],\r\n  declarations: [ ResourceListComponent ],\r\n  providers: [ ResourceService ]\r\n})\r\nexport class ResourceListModule implements WithCustomElementComponent {\r\n  customElementComponent: Type<any> = ResourceListComponent;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"994.3710a6c8db177be4.js"}