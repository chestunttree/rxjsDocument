{
  "1182": {
    "id": "1182",
    "label": "pairwise",
    "path": "api/operators/pairwise",
    "docType": "function"
  },
  "1635": {
    "id": "1635",
    "label": "finalize",
    "path": "api/operators/finalize",
    "docType": "function"
  },
  "1894": {
    "id": "1894",
    "label": "mergeScan",
    "path": "api/operators/mergeScan",
    "docType": "function"
  },
  "1997": {
    "id": "1997",
    "label": "partition",
    "path": "api/index/function/partition",
    "docType": "function"
  },
  "2019": {
    "id": "2019",
    "label": "debounceTime",
    "path": "api/operators/debounceTime",
    "docType": "function"
  },
  "2068": {
    "id": "2068",
    "label": "supporting a conventional callback API",
    "options": [
      "71e0"
    ]
  },
  "2207": {
    "id": "2207",
    "label": "and ignore incoming values while the current nested Observable has not yet completed",
    "options": [
      "ce5c"
    ]
  },
  "3004": {
    "id": "3004",
    "label": "if they are at the start of the Observable",
    "options": [
      "5b53",
      "62a8",
      "19f4"
    ]
  },
  "3622": {
    "id": "3622",
    "label": "immediately",
    "options": [
      "7984"
    ]
  },
  "3859": {
    "id": "3859",
    "label": "based on time",
    "options": [
      "4d2f",
      "fec3"
    ]
  },
  "3889": {
    "id": "3889",
    "label": "that occur too frequently",
    "options": [
      "4cae",
      "bef0",
      "23d1"
    ]
  },
  "3915": {
    "id": "3915",
    "label": "timer",
    "path": "api/index/function/timer",
    "docType": "function"
  },
  "3959": {
    "id": "3959",
    "label": "I want to ignore values",
    "options": [
      "a2ee",
      "9a79",
      "4fb7",
      "5ef2",
      "94de",
      "3889"
    ]
  },
  "4051": {
    "id": "4051",
    "label": "repeat",
    "path": "api/operators/repeat",
    "docType": "function"
  },
  "4394": {
    "id": "4394",
    "label": "which is built on demand when subscribed",
    "options": [
      "6736"
    ]
  },
  "4748": {
    "id": "4748",
    "label": "elementAt",
    "path": "api/operators/elementAt",
    "docType": "function"
  },
  "5100": {
    "id": "5100",
    "label": "retryWhen"
  },
  "5200": {
    "id": "5200",
    "label": "and cancel the previous nested Observable when a new value arrives",
    "options": [
      "ab19",
      "e64a"
    ]
  },
  "5419": {
    "id": "5419",
    "label": "forkJoin",
    "path": "api/index/function/forkJoin",
    "docType": "function"
  },
  "6045": {
    "id": "6045",
    "label": "takeUntil",
    "path": "api/operators/takeUntil",
    "docType": "function"
  },
  "6105": {
    "id": "6105",
    "label": "distinctUntilChanged",
    "path": "api/operators/distinctUntilChanged",
    "docType": "function"
  },
  "6116": {
    "id": "6116",
    "label": "and only the last value",
    "options": [
      "3e9c"
    ]
  },
  "6421": {
    "id": "6421",
    "label": "until the Observable completes",
    "options": [
      "e3a5",
      "fe21"
    ]
  },
  "6513": {
    "id": "6513",
    "label": "window",
    "path": "api/operators/window",
    "docType": "function"
  },
  "6583": {
    "id": "6583",
    "label": "using a state machine similar to a for loop",
    "options": [
      "d198"
    ]
  },
  "6736": {
    "id": "6736",
    "label": "defer",
    "path": "api/index/function/defer",
    "docType": "function"
  },
  "6860": {
    "id": "6860",
    "label": "zip",
    "path": "api/index/function/zip",
    "docType": "function"
  },
  "7032": {
    "id": "7032",
    "label": "distinct",
    "path": "api/operators/distinct",
    "docType": "function"
  },
  "7038": {
    "id": "7038",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "3ce4",
      "9d71"
    ]
  },
  "7864": {
    "id": "7864",
    "label": "concat",
    "path": "api/index/function/concat",
    "docType": "function"
  },
  "7984": {
    "id": "7984",
    "label": "retry",
    "path": "api/operators/retry",
    "docType": "function"
  },
  "8189": {
    "id": "8189",
    "label": "skipUntil",
    "path": "api/operators/skipUntil",
    "docType": "function"
  },
  "8576": {
    "id": "8576",
    "label": "Observable",
    "method": "toPromise"
  },
  "8601": {
    "id": "8601",
    "label": "windowTime",
    "path": "api/operators/windowTime",
    "docType": "function"
  },
  "9138": {
    "id": "9138",
    "label": "and output the computed values when the source emits a value",
    "options": [
      "1ad4"
    ]
  },
  "9193": {
    "id": "9193",
    "label": "where the silence duration threshold is determined by another Observable",
    "options": [
      "dd1e"
    ]
  },
  "9473": {
    "id": "9473",
    "label": "using a specific subject implementation",
    "options": [
      "6fbe"
    ]
  },
  "9592": {
    "id": "9592",
    "label": "that just completes, without emitting values",
    "options": [
      "b1b9"
    ]
  },
  "9627": {
    "id": "9627",
    "label": "over the values in an array",
    "options": [
      "b99f"
    ]
  },
  "9739": {
    "id": "9739",
    "label": "concatMapTo"
  },
  "9784": {
    "id": "9784",
    "label": "to be a value calculated through a formula",
    "options": [
      "a06b"
    ]
  },
  "0782": {
    "id": "0782",
    "label": "mapTo"
  },
  "27fa": {
    "id": "27fa",
    "label": "to be a constant value",
    "options": [
      "0782"
    ]
  },
  "a06b": {
    "id": "a06b",
    "label": "map",
    "path": "api/operators/map",
    "docType": "function"
  },
  "7d34": {
    "id": "7d34",
    "label": "I want to change each emitted value",
    "options": [
      "27fa",
      "9784"
    ]
  },
  "a5c3": {
    "id": "a5c3",
    "label": "map",
    "path": "api/operators/map",
    "docType": "function"
  },
  "b7ec": {
    "id": "b7ec",
    "label": "I want to pick a property off each emitted value",
    "options": [
      "a5c3"
    ]
  },
  "3db5": {
    "id": "3db5",
    "label": "tap",
    "path": "api/operators/tap",
    "docType": "function"
  },
  "2f4e": {
    "id": "2f4e",
    "label": "I want to spy the values being emitted without affecting them",
    "options": [
      "3db5"
    ]
  },
  "ada5": {
    "id": "ada5",
    "label": "filter",
    "path": "api/operators/filter",
    "docType": "function"
  },
  "89a9": {
    "id": "89a9",
    "label": "based on custom logic",
    "options": [
      "ada5"
    ]
  },
  "33fe": {
    "id": "33fe",
    "label": "first",
    "path": "api/operators/first",
    "docType": "function"
  },
  "5b53": {
    "id": "5b53",
    "label": "and only the first value",
    "options": [
      "33fe"
    ]
  },
  "be6a": {
    "id": "be6a",
    "label": "take",
    "path": "api/operators/take",
    "docType": "function"
  },
  "62a8": {
    "id": "62a8",
    "label": "based on a given amount",
    "options": [
      "be6a"
    ]
  },
  "6c25": {
    "id": "6c25",
    "label": "takeWhile",
    "path": "api/operators/takeWhile",
    "docType": "function"
  },
  "19f4": {
    "id": "19f4",
    "label": "based on custom logic",
    "options": [
      "6c25"
    ]
  },
  "0c3c": {
    "id": "0c3c",
    "label": "if they are exactly the n-th emission",
    "options": [
      "4748"
    ]
  },
  "3e9c": {
    "id": "3e9c",
    "label": "last",
    "path": "api/operators/last",
    "docType": "function"
  },
  "a34d": {
    "id": "a34d",
    "label": "takeLast",
    "path": "api/operators/takeLast",
    "docType": "function"
  },
  "9d1c": {
    "id": "9d1c",
    "label": "based on a given amount",
    "options": [
      "a34d"
    ]
  },
  "ba9a": {
    "id": "ba9a",
    "label": "if they are at the end of the Observable",
    "options": [
      "6116",
      "9d1c"
    ]
  },
  "bff9": {
    "id": "bff9",
    "label": "until another Observable emits a value",
    "options": [
      "6045"
    ]
  },
  "e542": {
    "id": "e542",
    "label": "I want to allow some values to pass",
    "options": [
      "89a9",
      "3004",
      "0c3c",
      "ba9a",
      "bff9"
    ]
  },
  "09ee": {
    "id": "09ee",
    "label": "ignoreElements",
    "path": "api/operators/ignoreElements",
    "docType": "function"
  },
  "a2ee": {
    "id": "a2ee",
    "label": "altogether",
    "options": [
      "09ee"
    ]
  },
  "2f06": {
    "id": "2f06",
    "label": "skip",
    "path": "api/operators/skip",
    "docType": "function"
  },
  "0c2c": {
    "id": "0c2c",
    "label": "based on a given amount",
    "options": [
      "2f06"
    ]
  },
  "19cf": {
    "id": "19cf",
    "label": "skipWhile",
    "path": "api/operators/skipWhile",
    "docType": "function"
  },
  "cec1": {
    "id": "cec1",
    "label": "based on custom logic",
    "options": [
      "19cf"
    ]
  },
  "9a79": {
    "id": "9a79",
    "label": "from the start of the Observable",
    "options": [
      "0c2c",
      "cec1"
    ]
  },
  "9d1d": {
    "id": "9d1d",
    "label": "skipLast",
    "path": "api/operators/skipLast",
    "docType": "function"
  },
  "4fb7": {
    "id": "4fb7",
    "label": "from the end of the Observable",
    "options": [
      "9d1d"
    ]
  },
  "5ef2": {
    "id": "5ef2",
    "label": "until another Observable emits a value",
    "options": [
      "8189"
    ]
  },
  "348c": {
    "id": "348c",
    "label": "emitted just before the current value",
    "options": [
      "6105"
    ]
  },
  "52bb": {
    "id": "52bb",
    "label": "emitted some time in the past",
    "options": [
      "7032"
    ]
  },
  "fe2a": {
    "id": "fe2a",
    "label": "according to value equality",
    "options": [
      "348c",
      "52bb"
    ]
  },
  "549e": {
    "id": "549e",
    "label": "distinctUntilKeyChanged",
    "path": "api/operators/distinctUntilKeyChanged",
    "docType": "function"
  },
  "6c24": {
    "id": "6c24",
    "label": "emitted just before the current value",
    "options": [
      "549e"
    ]
  },
  "1b12": {
    "id": "1b12",
    "label": "according to a key or object property",
    "options": [
      "6c24"
    ]
  },
  "94de": {
    "id": "94de",
    "label": "that match some previous value",
    "options": [
      "fe2a",
      "1b12"
    ]
  },
  "39b3": {
    "id": "39b3",
    "label": "throttle",
    "path": "api/operators/throttle",
    "docType": "function"
  },
  "6f2e": {
    "id": "6f2e",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "39b3"
    ]
  },
  "00fc": {
    "id": "00fc",
    "label": "throttleTime",
    "path": "api/operators/throttleTime",
    "docType": "function"
  },
  "44c1": {
    "id": "44c1",
    "label": "where time windows are determined by a time duration",
    "options": [
      "00fc"
    ]
  },
  "4cae": {
    "id": "4cae",
    "label": "by emitting the first value in each time window",
    "options": [
      "6f2e",
      "44c1"
    ]
  },
  "d90c": {
    "id": "d90c",
    "label": "audit",
    "path": "api/operators/audit",
    "docType": "function"
  },
  "d4ec": {
    "id": "d4ec",
    "label": "where time windows are determined by another Observable's emissions",
    "options": [
      "d90c"
    ]
  },
  "f715": {
    "id": "f715",
    "label": "auditTime",
    "path": "api/operators/auditTime",
    "docType": "function"
  },
  "cb79": {
    "id": "cb79",
    "label": "where time windows are determined by a time duration",
    "options": [
      "f715"
    ]
  },
  "bef0": {
    "id": "bef0",
    "label": "by emitting the last value in each time window",
    "options": [
      "d4ec",
      "cb79"
    ]
  },
  "dd1e": {
    "id": "dd1e",
    "label": "debounce",
    "path": "api/operators/debounce",
    "docType": "function"
  },
  "a311": {
    "id": "a311",
    "label": "where the silence duration threshold is determined by a time duration",
    "options": [
      "2019"
    ]
  },
  "23d1": {
    "id": "23d1",
    "label": "by emitting the last value as soon as enough silence has occurred",
    "options": [
      "9193",
      "a311"
    ]
  },
  "15df": {
    "id": "15df",
    "label": "reduce",
    "path": "api/operators/reduce",
    "docType": "function"
  },
  "ae37": {
    "id": "ae37",
    "label": "and only output the final computed value",
    "options": [
      "15df"
    ]
  },
  "1ad4": {
    "id": "1ad4",
    "label": "scan",
    "path": "api/operators/scan",
    "docType": "function"
  },
  "7a66": {
    "id": "7a66",
    "label": "and output the computed values as a nested Observable when the source emits a value",
    "options": [
      "1894"
    ]
  },
  "6ecc": {
    "id": "6ecc",
    "label": "switchScan",
    "path": "api/operators/switchScan",
    "docType": "function"
  },
  "1a09": {
    "id": "1a09",
    "label": "and output the computed values as a nested Observable when the source emits a value while unsubscribing from the previous nested Observable",
    "options": [
      "6ecc"
    ]
  },
  "1ba0": {
    "id": "1ba0",
    "label": "I want to compute a formula using all values emitted",
    "options": [
      "ae37",
      "9138",
      "7a66",
      "1a09"
    ]
  },
  "9ed4": {
    "id": "9ed4",
    "label": "materialize",
    "path": "api/operators/materialize",
    "docType": "function"
  },
  "ff38": {
    "id": "ff38",
    "label": "that describes each notification (next, error, or complete)",
    "options": [
      "9ed4"
    ]
  },
  "bcc6": {
    "id": "bcc6",
    "label": "timeInterval",
    "path": "api/operators/timeInterval",
    "docType": "function"
  },
  "3c11": {
    "id": "3c11",
    "label": "that includes the time past since the last emitted value",
    "options": [
      "bcc6"
    ]
  },
  "37ef": {
    "id": "37ef",
    "label": "I want to wrap its messages with metadata",
    "options": [
      "ff38",
      "3c11"
    ]
  },
  "b9fa": {
    "id": "b9fa",
    "label": "timeout",
    "path": "api/operators/timeout",
    "docType": "function"
  },
  "701a": {
    "id": "701a",
    "label": "I want to throw an error",
    "options": [
      "b9fa"
    ]
  },
  "0e4b": {
    "id": "0e4b",
    "label": "timeoutWith"
  },
  "0986": {
    "id": "0986",
    "label": "I want to switch to another Observable",
    "options": [
      "0e4b"
    ]
  },
  "41ce": {
    "id": "41ce",
    "label": "after a period of inactivity",
    "options": [
      "701a",
      "0986"
    ]
  },
  "2b10": {
    "id": "2b10",
    "label": "single",
    "path": "api/operators/single",
    "docType": "function"
  },
  "a5f1": {
    "id": "a5f1",
    "label": "I want to ensure there is only one value",
    "options": [
      "2b10"
    ]
  },
  "3f5e": {
    "id": "3f5e",
    "label": "count",
    "path": "api/operators/count",
    "docType": "function"
  },
  "e739": {
    "id": "e739",
    "label": "I want to know how many values it emits",
    "options": [
      "3f5e"
    ]
  },
  "9ed8": {
    "id": "9ed8",
    "label": "startWith",
    "path": "api/operators/startWith",
    "docType": "function"
  },
  "0cc7": {
    "id": "0cc7",
    "label": "I want to prepend one value",
    "options": [
      "9ed8"
    ]
  },
  "7ff4": {
    "id": "7ff4",
    "label": "delay",
    "path": "api/operators/delay",
    "docType": "function"
  },
  "3cad": {
    "id": "3cad",
    "label": "based on a given amount of time",
    "options": [
      "7ff4"
    ]
  },
  "f6b9": {
    "id": "f6b9",
    "label": "delayWhen",
    "path": "api/operators/delayWhen",
    "docType": "function"
  },
  "92c8": {
    "id": "92c8",
    "label": "based on the emissions of another Observable",
    "options": [
      "f6b9"
    ]
  },
  "e0dc": {
    "id": "e0dc",
    "label": "I want to delay the emissions",
    "options": [
      "3cad",
      "92c8"
    ]
  },
  "d99d": {
    "id": "d99d",
    "label": "toArray",
    "path": "api/operators/toArray",
    "docType": "function"
  },
  "e3a5": {
    "id": "e3a5",
    "label": "and convert to an array",
    "options": [
      "d99d"
    ]
  },
  "fe21": {
    "id": "fe21",
    "label": "and convert to a Promise",
    "options": [
      "8576"
    ]
  },
  "a0b0": {
    "id": "a0b0",
    "label": "consecutively in pairs, as arrays",
    "options": [
      "1182"
    ]
  },
  "6f72": {
    "id": "6f72",
    "label": "based on a criterion, and output two Observables: those that match the criterion and those that do not",
    "options": [
      "1997"
    ]
  },
  "d238": {
    "id": "d238",
    "label": "bufferCount",
    "path": "api/operators/bufferCount",
    "docType": "function"
  },
  "bd8d": {
    "id": "bd8d",
    "label": "and emit the group as an array",
    "options": [
      "d238"
    ]
  },
  "6dbf": {
    "id": "6dbf",
    "label": "windowCount",
    "path": "api/operators/windowCount",
    "docType": "function"
  },
  "aa1e": {
    "id": "aa1e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6dbf"
    ]
  },
  "f1fd": {
    "id": "f1fd",
    "label": "in batches of a particular size",
    "options": [
      "bd8d",
      "aa1e"
    ]
  },
  "eecf": {
    "id": "eecf",
    "label": "bufferTime",
    "path": "api/operators/bufferTime",
    "docType": "function"
  },
  "4d2f": {
    "id": "4d2f",
    "label": "and emit the group as an array",
    "options": [
      "eecf"
    ]
  },
  "fec3": {
    "id": "fec3",
    "label": "and emit the group as a nested Observable",
    "options": [
      "8601"
    ]
  },
  "90b6": {
    "id": "90b6",
    "label": "buffer",
    "path": "api/operators/buffer",
    "docType": "function"
  },
  "ff21": {
    "id": "ff21",
    "label": "and emit the group as an array",
    "options": [
      "90b6"
    ]
  },
  "ba66": {
    "id": "ba66",
    "label": "and emit the group as a nested Observable",
    "options": [
      "6513"
    ]
  },
  "bbb2": {
    "id": "bbb2",
    "label": "until another Observable emits",
    "options": [
      "ff21",
      "ba66"
    ]
  },
  "9d5e": {
    "id": "9d5e",
    "label": "bufferWhen",
    "path": "api/operators/bufferWhen",
    "docType": "function"
  },
  "1d22": {
    "id": "1d22",
    "label": "and emit the group as an array",
    "options": [
      "9d5e"
    ]
  },
  "2f7c": {
    "id": "2f7c",
    "label": "windowWhen",
    "path": "api/operators/windowWhen",
    "docType": "function"
  },
  "4dd9": {
    "id": "4dd9",
    "label": "and emit the group as a nested Observable",
    "options": [
      "2f7c"
    ]
  },
  "d690": {
    "id": "d690",
    "label": "based on the emissions of an Observable created on-demand",
    "options": [
      "1d22",
      "4dd9"
    ]
  },
  "a78b": {
    "id": "a78b",
    "label": "bufferToggle",
    "path": "api/operators/bufferToggle",
    "docType": "function"
  },
  "ebed": {
    "id": "ebed",
    "label": "and emit the group as an array",
    "options": [
      "a78b"
    ]
  },
  "fd4a": {
    "id": "fd4a",
    "label": "windowToggle",
    "path": "api/operators/windowToggle",
    "docType": "function"
  },
  "266e": {
    "id": "266e",
    "label": "and emit the group as a nested Observable",
    "options": [
      "fd4a"
    ]
  },
  "980d": {
    "id": "980d",
    "label": "based on another Observable for opening a group, and an Observable for closing a group",
    "options": [
      "ebed",
      "266e"
    ]
  },
  "db4f": {
    "id": "db4f",
    "label": "groupBy",
    "path": "api/operators/groupBy",
    "docType": "function"
  },
  "6bd0": {
    "id": "6bd0",
    "label": "based on a key calculated from the emitted values",
    "options": [
      "db4f"
    ]
  },
  "b0ad": {
    "id": "b0ad",
    "label": "I want to group the values",
    "options": [
      "6421",
      "a0b0",
      "6f72",
      "f1fd",
      "3859",
      "bbb2",
      "d690",
      "980d",
      "6bd0"
    ]
  },
  "510d": {
    "id": "510d",
    "label": "mergeMapTo"
  },
  "7bdf": {
    "id": "7bdf",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "510d"
    ]
  },
  "7a1d": {
    "id": "7a1d",
    "label": "mergeMap",
    "path": "api/operators/mergeMap",
    "docType": "function"
  },
  "f79a": {
    "id": "f79a",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "7a1d"
    ]
  },
  "ca4f": {
    "id": "ca4f",
    "label": "and emit the values from all nested Observables in parallel",
    "options": [
      "7bdf",
      "f79a"
    ]
  },
  "f70d": {
    "id": "f70d",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "9739"
    ]
  },
  "b878": {
    "id": "b878",
    "label": "concatMap",
    "path": "api/operators/concatMap",
    "docType": "function"
  },
  "592b": {
    "id": "592b",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "b878"
    ]
  },
  "ace3": {
    "id": "ace3",
    "label": "and emit the values from each nested Observable in order",
    "options": [
      "f70d",
      "592b"
    ]
  },
  "c857": {
    "id": "c857",
    "label": "switchMapTo"
  },
  "ab19": {
    "id": "ab19",
    "label": "where the nested Observable is the same for every value",
    "options": [
      "c857"
    ]
  },
  "affb": {
    "id": "affb",
    "label": "switchMap",
    "path": "api/operators/switchMap",
    "docType": "function"
  },
  "e64a": {
    "id": "e64a",
    "label": "where the nested Observable is calculated for each value",
    "options": [
      "affb"
    ]
  },
  "ce5c": {
    "id": "ce5c",
    "label": "exhaustMap",
    "path": "api/operators/exhaustMap",
    "docType": "function"
  },
  "51a2": {
    "id": "51a2",
    "label": "expand",
    "path": "api/operators/expand",
    "docType": "function"
  },
  "9da0": {
    "id": "9da0",
    "label": "and recursively start a new Observable for each new value",
    "options": [
      "51a2"
    ]
  },
  "b1cb": {
    "id": "b1cb",
    "label": "I want to start a new Observable for each value",
    "options": [
      "ca4f",
      "ace3",
      "5200",
      "2207",
      "9da0"
    ]
  },
  "9bf6": {
    "id": "9bf6",
    "label": "pipe",
    "path": "api/index/function/pipe",
    "docType": "function"
  },
  "f320": {
    "id": "f320",
    "label": "I want to perform custom operations",
    "options": [
      "9bf6"
    ]
  },
  "f943": {
    "id": "f943",
    "label": "share",
    "path": "api/operators/share",
    "docType": "function"
  },
  "93a1": {
    "id": "93a1",
    "label": "and start it as soon as the first subscriber arrives",
    "options": [
      "f943"
    ]
  },
  "144c": {
    "id": "144c",
    "label": "connectable",
    "path": "api/index/function/connectable",
    "docType": "function"
  },
  "d290": {
    "id": "d290",
    "label": "and start it manually or imperatively",
    "options": [
      "144c"
    ]
  },
  "ce28": {
    "id": "ce28",
    "label": "using a conventional Subject",
    "options": [
      "93a1",
      "d290"
    ]
  },
  "6fbe": {
    "id": "6fbe",
    "label": "share",
    "path": "api/operators/share",
    "docType": "function"
  },
  "f9e4": {
    "id": "f9e4",
    "label": "I want to share a subscription between multiple subscribers",
    "options": [
      "ce28",
      "9473"
    ]
  },
  "dab0": {
    "id": "dab0",
    "label": "catchError",
    "path": "api/operators/catchError",
    "docType": "function"
  },
  "5b3d": {
    "id": "5b3d",
    "label": "I want to start a new Observable",
    "options": [
      "dab0"
    ]
  },
  "34ad": {
    "id": "34ad",
    "label": "when another Observable emits",
    "options": [
      "5100"
    ]
  },
  "ccb5": {
    "id": "ccb5",
    "label": "I want to re-subscribe",
    "options": [
      "3622",
      "34ad"
    ]
  },
  "3eba": {
    "id": "3eba",
    "label": "when an error occurs",
    "options": [
      "5b3d",
      "ccb5"
    ]
  },
  "5a6d": {
    "id": "5a6d",
    "label": "immediately",
    "options": [
      "4051"
    ]
  },
  "c305": {
    "id": "c305",
    "label": "repeatWhen"
  },
  "8bcb": {
    "id": "8bcb",
    "label": "when another Observable emits",
    "options": [
      "c305"
    ]
  },
  "2f92": {
    "id": "2f92",
    "label": "I want to re-subscribe",
    "options": [
      "5a6d",
      "8bcb"
    ]
  },
  "9e7e": {
    "id": "9e7e",
    "label": "I want to start a new Observable",
    "options": [
      "7864"
    ]
  },
  "d675": {
    "id": "d675",
    "label": "when it completes",
    "options": [
      "2f92",
      "9e7e"
    ]
  },
  "e260": {
    "id": "e260",
    "label": "when it completes, errors or unsubscribes, I want to execute a function",
    "options": [
      "1635"
    ]
  },
  "e1c9": {
    "id": "e1c9",
    "label": "subscribeOn",
    "path": "api/operators/subscribeOn",
    "docType": "function"
  },
  "844f": {
    "id": "844f",
    "label": "that routes calls to subscribe",
    "options": [
      "e1c9"
    ]
  },
  "699f": {
    "id": "699f",
    "label": "observeOn",
    "path": "api/operators/observeOn",
    "docType": "function"
  },
  "4e9e": {
    "id": "4e9e",
    "label": "that routes values to observers",
    "options": [
      "699f"
    ]
  },
  "0a50": {
    "id": "0a50",
    "label": "I want to change the scheduler",
    "options": [
      "844f",
      "4e9e"
    ]
  },
  "130f": {
    "id": "130f",
    "label": "race",
    "path": "api/index/function/race",
    "docType": "function"
  },
  "a366": {
    "id": "a366",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "130f"
    ]
  },
  "02fe": {
    "id": "02fe",
    "label": "merge",
    "path": "api/index/function/merge",
    "docType": "function"
  },
  "763d": {
    "id": "763d",
    "label": "I want to output the values from either of them",
    "options": [
      "02fe"
    ]
  },
  "e3fb": {
    "id": "e3fb",
    "label": "combineLatest",
    "path": "api/index/function/combineLatest",
    "docType": "function"
  },
  "63bd": {
    "id": "63bd",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "e3fb"
    ]
  },
  "a1e1": {
    "id": "a1e1",
    "label": "withLatestFrom",
    "path": "api/operators/withLatestFrom",
    "docType": "function"
  },
  "ecee": {
    "id": "ecee",
    "label": "using the latest value of each source only when the primary Observable emits",
    "options": [
      "a1e1"
    ]
  },
  "c191": {
    "id": "c191",
    "label": "using each source value only once",
    "options": [
      "6860"
    ]
  },
  "a9ef": {
    "id": "a9ef",
    "label": "I want to output a value computed from values of the source Observables",
    "options": [
      "63bd",
      "ecee",
      "c191"
    ]
  },
  "d211": {
    "id": "d211",
    "label": "I want to combine this Observable with others, and",
    "options": [
      "a366",
      "763d",
      "a9ef"
    ]
  },
  "1e76": {
    "id": "1e76",
    "label": "I have one existing Observable, and",
    "options": [
      "7d34",
      "b7ec",
      "2f4e",
      "e542",
      "3959",
      "1ba0",
      "37ef",
      "41ce",
      "a5f1",
      "e739",
      "0cc7",
      "e0dc",
      "b0ad",
      "b1cb",
      "f320",
      "f9e4",
      "3eba",
      "d675",
      "e260",
      "0a50",
      "d211"
    ]
  },
  "ad43": {
    "id": "ad43",
    "label": "race",
    "path": "api/index/function/race",
    "docType": "function"
  },
  "0260": {
    "id": "0260",
    "label": "I want to receive values only from the Observable that emits a value first",
    "options": [
      "ad43"
    ]
  },
  "dc99": {
    "id": "dc99",
    "label": "I want to be notified when all of them have completed",
    "options": [
      "5419"
    ]
  },
  "1ded": {
    "id": "1ded",
    "label": "merge",
    "path": "api/index/function/merge",
    "docType": "function"
  },
  "163d": {
    "id": "163d",
    "label": "I want to output the values from either of them",
    "options": [
      "1ded"
    ]
  },
  "83f8": {
    "id": "83f8",
    "label": "combineLatest",
    "path": "api/index/function/combineLatest",
    "docType": "function"
  },
  "3ce4": {
    "id": "3ce4",
    "label": "using the latest value of each source whenever any source emits",
    "options": [
      "83f8"
    ]
  },
  "4c42": {
    "id": "4c42",
    "label": "zip",
    "path": "api/index/function/zip",
    "docType": "function"
  },
  "9d71": {
    "id": "9d71",
    "label": "using each source value only once",
    "options": [
      "4c42"
    ]
  },
  "2e06": {
    "id": "2e06",
    "label": "concat",
    "path": "api/index/function/concat",
    "docType": "function"
  },
  "f691": {
    "id": "f691",
    "label": "I want to subscribe to each in order",
    "options": [
      "2e06"
    ]
  },
  "bf96": {
    "id": "bf96",
    "label": "I have some Observables to combine together as one Observable, and",
    "options": [
      "0260",
      "dc99",
      "163d",
      "7038",
      "f691"
    ]
  },
  "01f5": {
    "id": "01f5",
    "label": "Observable",
    "method": "create"
  },
  "faf1": {
    "id": "faf1",
    "label": "using custom logic",
    "options": [
      "01f5"
    ]
  },
  "d198": {
    "id": "d198",
    "label": "generate",
    "path": "api/index/function/generate",
    "docType": "function"
  },
  "c8b4": {
    "id": "c8b4",
    "label": "throwError",
    "path": "api/index/function/throwError",
    "docType": "function"
  },
  "d7e5": {
    "id": "d7e5",
    "label": "that throws an error",
    "options": [
      "c8b4"
    ]
  },
  "b1b9": {
    "id": "b1b9",
    "label": "EMPTY",
    "path": "api/index/const/EMPTY",
    "docType": "const"
  },
  "740c": {
    "id": "740c",
    "label": "NEVER",
    "path": "api/index/const/NEVER",
    "docType": "const"
  },
  "7b16": {
    "id": "7b16",
    "label": "that never emits anything",
    "options": [
      "740c"
    ]
  },
  "c79a": {
    "id": "c79a",
    "label": "fromEvent",
    "path": "api/index/function/fromEvent",
    "docType": "function"
  },
  "d040": {
    "id": "d040",
    "label": "coming from the DOM or Node.js or similar",
    "options": [
      "c79a"
    ]
  },
  "44a3": {
    "id": "44a3",
    "label": "fromEventPattern",
    "path": "api/index/function/fromEventPattern",
    "docType": "function"
  },
  "200d": {
    "id": "200d",
    "label": "that uses an API to add and remove event handlers",
    "options": [
      "44a3"
    ]
  },
  "be15": {
    "id": "be15",
    "label": "from an existing source of events",
    "options": [
      "d040",
      "200d"
    ]
  },
  "eba8": {
    "id": "eba8",
    "label": "from"
  },
  "22fa": {
    "id": "22fa",
    "label": "from a Promise or an event source",
    "options": [
      "eba8"
    ]
  },
  "b99f": {
    "id": "b99f",
    "label": "from"
  },
  "b57c": {
    "id": "b57c",
    "label": "range",
    "path": "api/index/function/range",
    "docType": "function"
  },
  "2d9a": {
    "id": "2d9a",
    "label": "over values in a numeric range",
    "options": [
      "b57c"
    ]
  },
  "b077": {
    "id": "b077",
    "label": "of",
    "path": "api/index/function/of",
    "docType": "function"
  },
  "64a4": {
    "id": "64a4",
    "label": "over prefined values given as arguments",
    "options": [
      "b077"
    ]
  },
  "f639": {
    "id": "f639",
    "label": "that iterates",
    "options": [
      "9627",
      "2d9a",
      "64a4"
    ]
  },
  "938d": {
    "id": "938d",
    "label": "interval",
    "path": "api/index/function/interval",
    "docType": "function"
  },
  "6cc8": {
    "id": "6cc8",
    "label": "regularly",
    "options": [
      "938d"
    ]
  },
  "c24c": {
    "id": "c24c",
    "label": "with an optional initial delay",
    "options": [
      "3915"
    ]
  },
  "ea17": {
    "id": "ea17",
    "label": "that emits values on a timer",
    "options": [
      "6cc8",
      "c24c"
    ]
  },
  "aaf4": {
    "id": "aaf4",
    "label": "I want to create a new Observable",
    "options": [
      "faf1",
      "6583",
      "d7e5",
      "9592",
      "7b16",
      "be15",
      "22fa",
      "f639",
      "ea17",
      "4394"
    ]
  },
  "71e0": {
    "id": "71e0",
    "label": "bindCallback",
    "path": "api/index/function/bindCallback",
    "docType": "function"
  },
  "9faf": {
    "id": "9faf",
    "label": "bindNodeCallback",
    "path": "api/index/function/bindNodeCallback",
    "docType": "function"
  },
  "24db": {
    "id": "24db",
    "label": "supporting Node.js callback style API",
    "options": [
      "9faf"
    ]
  },
  "068e": {
    "id": "068e",
    "label": "I want to convert a callback to an Observable",
    "options": [
      "2068",
      "24db"
    ]
  },
  "578c": {
    "id": "578c",
    "label": "I have no Observables yet, and",
    "options": [
      "aaf4",
      "068e"
    ]
  },
  "initial": {
    "id": "initial",
    "options": [
      "1e76",
      "bf96",
      "578c"
    ]
  }
}