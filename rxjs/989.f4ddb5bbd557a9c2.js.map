{"version":3,"mappings":"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","names":["OperatorDecisionTreeDataService","constructor","http","getDecisionTree$","this","get","t","factory","tree","error","OperatorDecisionTreeService","dataService","previousBranchIds","currentBranchId","BehaviorSubject","initialState","pipe","catchError","of","configOrBufferSize","windowTime","scheduler","bufferSize","refCount","Infinity","share","connector","ReplaySubject","resetOnError","resetOnComplete","resetOnRefCountZero","shareReplay","combineLatest","tree$","state$","filter","treeIsErrorFree","map","includes","length","isInitialDecision","entityId","label","join","trim","state","options","node","nodeHasOptions","option","initial","mapTo","snapShot","getValue","selectOption","optionId","next","back","previousOptionId","slice","startOver","i0","ctx_r5","ctx_r7","ctx_r12","oxw","OperatorDecisionTreeComponent","operatorDecisionTreeService","scrollService","currentSentence$","options$","isBeyondInitialQuestion$","hasError$","scrollToTop","ngOnDestroy","selectors","trigger","style","transform","transition","animate","OperatorDecisionTreeModule","ScrollService","imports","CommonModule","MatButtonModule","MatCardModule","MatRippleModule"],"sources":["./src/app/custom-elements/operator-decision-tree/operator-decision-tree-data.service.ts","./src/app/custom-elements/operator-decision-tree/utils.ts","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.service.ts","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.component.ts","./src/app/custom-elements/operator-decision-tree/operator-decision-tree.module.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OperatorDecisionTree } from './interfaces';\r\n\r\n@Injectable()\r\nexport class OperatorDecisionTreeDataService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getDecisionTree$(): Observable<OperatorDecisionTree> {\r\n    return this.http.get<OperatorDecisionTree>(\r\n      '/generated/docs/app/decision-tree-data.json'\r\n    );\r\n  }\r\n}\r\n","import { OperatorDecisionTree, OperatorTreeNode, OperatorTreeNodeWithOptions } from './interfaces';\r\n\r\nexport function isInitialDecision(previousBranchIds: string[]): boolean {\r\n  return (\r\n    previousBranchIds.includes('initial') && previousBranchIds.length === 1\r\n  );\r\n}\r\n\r\nexport function treeIsErrorFree(tree: OperatorDecisionTree): boolean {\r\n  return !tree.error;\r\n}\r\n\r\nexport function nodeHasOptions(node: OperatorTreeNode): node is OperatorTreeNodeWithOptions {\r\n  return !!node.options;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { filter, map, mapTo, shareReplay, catchError } from 'rxjs/operators';\r\nimport { OperatorDecisionTree, OperatorTreeNode, State } from './interfaces';\r\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\r\nimport { isInitialDecision, nodeHasOptions, treeIsErrorFree } from './utils';\r\n\r\n@Injectable()\r\nexport class OperatorDecisionTreeService {\r\n  private initialState: State = {\r\n    previousBranchIds: ['initial'],\r\n    currentBranchId: 'initial'\r\n  };\r\n  private state$ = new BehaviorSubject<State>(this.initialState);\r\n  private tree$: Observable<\r\n    OperatorDecisionTree\r\n  > = this.dataService.getDecisionTree$().pipe(\r\n    catchError(error => of(error)), // This helps if the JSON for some reason fails to get fetched\r\n    shareReplay()\r\n  );\r\n\r\n  currentSentence$: Observable<string> = combineLatest(\r\n    this.tree$,\r\n    this.state$\r\n  ).pipe(\r\n    filter(([tree]) => treeIsErrorFree(tree)),\r\n    map(([tree, { previousBranchIds }]) =>\r\n      isInitialDecision(previousBranchIds)\r\n        ? 'Start by choosing an option from the list below.'\r\n        : `${previousBranchIds\r\n            .map(entityId => tree[entityId].label)\r\n            .join(' ')}...`.trim()\r\n    )\r\n  );\r\n\r\n  options$: Observable<(OperatorTreeNode)[]> = combineLatest(\r\n    this.tree$,\r\n    this.state$\r\n  ).pipe(\r\n    filter(([tree, state]) => (\r\n        treeIsErrorFree(tree) &&\r\n        !!tree[state.currentBranchId] &&\r\n        !!tree[state.currentBranchId].options\r\n      )),\r\n    map(([tree, state]) => {\r\n      // Project is currently using TypeScript 2.9.2\r\n      // With TS 3.1+ this can be done better if we map to [tree, node] and typeguard with a tuple in a filter\r\n      // filter((a): a is [OperatorDecisionTree, OperatorTreeNodeWithOptions] => !a[0].error && !!a[1].options)\r\n      const node = tree[state.currentBranchId];\r\n      return nodeHasOptions(node)\r\n        ? node.options.map(option => tree[option])\r\n        : tree.initial.options.map(option => tree[option]);\r\n    })\r\n  );\r\n\r\n  isBeyondInitialQuestion$: Observable<boolean> = this.state$.pipe(\r\n    map(({ currentBranchId }) => currentBranchId !== 'initial')\r\n  );\r\n\r\n  // This helps if the JSON for some reason fails to get fetched\r\n  hasError$ = this.tree$.pipe(\r\n    filter(tree => !!tree.error),\r\n    mapTo(true)\r\n  );\r\n\r\n  constructor(private dataService: OperatorDecisionTreeDataService) {}\r\n\r\n  private get snapShot(): State {\r\n    return this.state$.getValue();\r\n  }\r\n\r\n  selectOption(optionId: string): void {\r\n    this.state$.next({\r\n      previousBranchIds: [...this.snapShot.previousBranchIds, optionId],\r\n      currentBranchId: optionId\r\n    });\r\n  }\r\n\r\n  back(): void {\r\n    const previousOptionId = this.snapShot.previousBranchIds[\r\n      this.snapShot.previousBranchIds.length - 2\r\n    ];\r\n\r\n    if (previousOptionId) {\r\n      this.state$.next({\r\n        previousBranchIds: [\r\n          ...this.snapShot.previousBranchIds.slice(\r\n            0,\r\n            this.snapShot.previousBranchIds.length - 1\r\n          )\r\n        ],\r\n        currentBranchId: previousOptionId\r\n      });\r\n    }\r\n  }\r\n\r\n  startOver(): void {\r\n    this.state$.next(this.initialState);\r\n  }\r\n}\r\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Component, OnDestroy } from '@angular/core';\r\nimport { ScrollService } from 'app/shared/scroll.service';\r\nimport { Observable } from 'rxjs';\r\nimport { OperatorTreeNode } from './interfaces';\r\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\r\n\r\n@Component({\r\n  selector: 'aio-operator-decision-tree',\r\n  template: `\r\n    <h1 class=\"mat-heading\" tabindex=\"0\">Operator Decision Tree</h1>\r\n    <ng-container *ngIf=\"(hasError$ | async) === false; else hasErrorTemplate\">\r\n      <h2 class=\"mat-subheading-2\" tabindex=\"0\">\r\n        {{ currentSentence$ | async }}\r\n      </h2>\r\n      <ng-container *ngIf=\"isBeyondInitialQuestion$ | async\">\r\n        <section>\r\n          <button (click)=\"back()\" mat-button class=\"back\">Back</button>\r\n          <button (click)=\"startOver()\" mat-button color=\"warn\" class=\"start-over\">Start Over</button>\r\n        </section>\r\n      </ng-container>\r\n      <div>\r\n        <ng-container *ngFor=\"let option of options$ | async\">\r\n          <ng-container *ngIf=\"option.options; else operatorTemplate\">\r\n            <button class=\"option mat-body-1\" (click)=\"selectOption(option.id)\" [@flyIn]>\r\n              <mat-card matRipple>\r\n                {{ option.label }}\r\n              </mat-card>\r\n            </button>\r\n          </ng-container>\r\n          <ng-template #operatorTemplate>\r\n            <p *ngIf=\"option.method\" class=\"mat-body-1\">\r\n              You want the {{ option.method }} of the {{ option.docType }}\r\n              <a href=\"{{ option.path }}#{{ option.method }}\">{{ option.label }}</a\r\n              >.\r\n            </p>\r\n            <p *ngIf=\"!option.method\" class=\"mat-body-1\">\r\n              You want the {{ option.docType }} <a href=\"{{ option.path }}\">{{ option.label }}</a\r\n              >.\r\n            </p>\r\n          </ng-template>\r\n        </ng-container>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <ng-template #hasErrorTemplate>\r\n      <div class=\"mat-body-1 error\">\r\n        <p>Oops! There was an issue loading the decision tree.. we're real sorry about that. Please try reloading the page.</p>\r\n        <p>\r\n          You can also try\r\n          <a href=\"https://github.com/ReactiveX/rxjs/issues/new?template=documentation.md\" target=\"_blank\">submitting an issue on GitHub</a\r\n          >.\r\n        </p>\r\n      </div>\r\n    </ng-template>\r\n  `,\r\n  styleUrls: ['./operator-decision-tree.component.scss'],\r\n  animations: [\r\n    trigger('flyIn', [\r\n      state('in', style({ transform: 'translateX(0)' })),\r\n      transition(':enter', [style({ transform: 'translateX(-100%)' }), animate(250)]),\r\n    ]),\r\n  ],\r\n})\r\nexport class OperatorDecisionTreeComponent implements OnDestroy {\r\n  currentSentence$: Observable<string> = this.operatorDecisionTreeService.currentSentence$;\r\n  options$: Observable<OperatorTreeNode[]> = this.operatorDecisionTreeService.options$;\r\n  isBeyondInitialQuestion$: Observable<boolean> = this.operatorDecisionTreeService.isBeyondInitialQuestion$;\r\n  hasError$: Observable<boolean> = this.operatorDecisionTreeService.hasError$;\r\n\r\n  constructor(private operatorDecisionTreeService: OperatorDecisionTreeService, private scrollService: ScrollService) {}\r\n\r\n  selectOption(optionId: string): void {\r\n    this.operatorDecisionTreeService.selectOption(optionId);\r\n    this.scrollService.scrollToTop();\r\n  }\r\n\r\n  back(): void {\r\n    this.operatorDecisionTreeService.back();\r\n  }\r\n\r\n  startOver(): void {\r\n    this.operatorDecisionTreeService.startOver();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.startOver();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, Type } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { ScrollService } from 'app/shared/scroll.service';\r\nimport { WithCustomElementComponent } from '../element-registry';\r\nimport { OperatorDecisionTreeDataService } from './operator-decision-tree-data.service';\r\nimport { OperatorDecisionTreeComponent } from './operator-decision-tree.component';\r\nimport { OperatorDecisionTreeService } from './operator-decision-tree.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatButtonModule, MatCardModule, MatRippleModule],\r\n  declarations: [OperatorDecisionTreeComponent],\r\n  providers: [\r\n    OperatorDecisionTreeDataService,\r\n    OperatorDecisionTreeService,\r\n    ScrollService\r\n  ]\r\n})\r\nexport class OperatorDecisionTreeModule implements WithCustomElementComponent {\r\n  customElementComponent: Type<\r\n    OperatorDecisionTreeComponent\r\n  > = OperatorDecisionTreeComponent;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"989.f4ddb5bbd557a9c2.js"}